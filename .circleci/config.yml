version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.8
        environment:
          AGMT_HS256_SECRET: "x709myFlW5"

      - image: circleci/postgres:9.6
        environment:
          AGMT_POSTGRES_HOST: "localhost"
          AGMT_POSTGRES_PORT: "5432"
          AGMT_POSTGRES_USER: "postgres"
          AGMT_POSTGRES_PASSWORD: "postgres"
          AGMT_POSTGRES_DATABASE: "postgres"

    filters:
      branches:
        only:
          - master
          - staging
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install -r requirements.txt

      - save_cache:
          paths:
            - "./venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run: sudo apt install -y postgresql-client || true

      - run:
          name: Setup postgresql user
          command: sudo -u postgres psql -h localhost -p 5432 -c "alter user postgres with superuser;"
          command: sudo -u postgres psql -h localhost -p 5432 -c "create database postgres;"
          command: sudo -u postgres psql -h localhost -p 5432 -c "grant all privileges on database postgres to postgres;"

      - run: echo '/usr/lib/postgresql/9.6/bin/:$PATH' >> $BASH_ENV
      - run:
          name: Set up vachan API database
          command: sudo -u postgres psql -p 5432 -h localhost -c 'create database postgres'

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            mkdir test-reports
            # pytest --junitxml=test-reports/junit.xml
            
            python3 -m pytest test/test_signin.py
            # python3 -m pytest test/test_availablebooks.py
            # python3 -m pytest test/test_bibleversetext.py
            # python3 -m pytest test/test_bibleversetext2.py
      
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports    


      # - store_artifacts:
      #     path: test-reports
      #     destination: test-reports